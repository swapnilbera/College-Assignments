#include <stdio.h>
#include <stdlib.h>

struct node{
int data;
struct node *left;
struct node *right;
int height;
};
int get_height(struct node* root){
if(root==NULL)
    return 0;
else
    return root->height;
}
int max(int a,int b){
return (a>b)?a:b;
}
int get_BF(struct node *root){
if(root==NULL)
    return 0;
else
    return (get_height(root->left)-get_height(root->right));
}
struct node* create_node(int key){
struct node *n;
n=(struct node*) malloc(sizeof(struct node));\
n->data=key;
n->left=NULL;
n->right=NULL;

return n;
}
struct node* right_rotation(struct node* y){
struct node* x=y->left;
struct node *t2=x->right;
x->right=y;
y->left=t2;
x->height=max(get_height(x->left),get_height(x->right))+1;
y->height=max(get_height(y->left),get_height(y->right))+1;
return x;
}
struct node* left_rotation(struct node* x){
struct node* y=x->right;
struct node *t2=y->left;
y->left=x;
x->right=t2;
x->height=max(get_height(x->left),get_height(x->right))+1;
y->height=max(get_height(y->left),get_height(y->right))+1;
return y;
}
void inorder_traversal(struct node *root){
if(root!=NULL){
    inorder_traversal(root->left);
    printf("%d ",root->data);
    inorder_traversal(root->right);
}
}
struct node* insert(struct node* root,int key){
if(root==NULL)
    return create_node(key);
if(key>root->data)
    root->right=insert(root->right,key);
if(key<root->data)
    root->left=insert(root->left,key);


root->height=max(get_height(root->left),get_height(root->right))+1;
int bf=get_BF(root);
if(bf>1 && key<root->left->data)
   return right_rotation(root);
if(bf<-1 && key>root->right->data)
    return left_rotation(root);
if(bf>1 && key>root->left->data){
    root->left=left_rotation(root->left);
    return right_rotation(root);
}
if(bf<-1 && key<root->right->data){
    root->right=right_rotation(root->right);
    return left_rotation(root);
}
return root;
}
int main()
{
    struct Node * root = NULL;


    root = insert(root, 1);
    root = insert(root, 2);
    root = insert(root, 4);
    root = insert(root, 5);
    root = insert(root, 6);
    root = insert(root, 3);
    inorder_traversal(root);

   return 0;
}
