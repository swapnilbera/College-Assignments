#include <stdio.h>
#include <stdlib.h>

struct node{
int data;
struct node *left;
struct node *right;
};
struct node* create_node(int key){
struct node *n;
n=(struct node*) malloc(sizeof(struct node));\
n->data=key;
n->left=NULL;
n->right=NULL;

return n;
}
void inorder_traversal(struct node *root){
if(root!=NULL){
    inorder_traversal(root->left);
    printf("%d ",root->data);
    inorder_traversal(root->right);
}
}

void insertion(struct node *root,int key){
struct node* prev=NULL;
while(root !=NULL){
    prev=root;
    if(key==root->data)
        printf("Can not insert.Already present in BST");
    if(key>root->data)
        root=root->right;
    else
        root=root->left;
}
struct node *new_node=create_node(key);
if(key>prev->data){
    prev->right=new_node;
}
else
    prev->left=new_node;
}
/*    5
    /   \
    2    8
   / \   / \
   1  3  7  9
*/
int main()
{
   struct node *root=create_node(5);
   struct node *r=create_node(8);
   struct node *l=create_node(2);
   struct node *rr=create_node(9);
   struct node *rl=create_node(7);
   struct node *ll=create_node(1);
   struct node *lr=create_node(3);
   root->left=l;
   root->right=r;
   l->left=ll;
   l->right=lr;
   r->right=rr;
   r->left=rl;
   printf("Tree before insertion:-\n");
   inorder_traversal(root);
   int x;
   printf("\nYou want to search which no.?");
   scanf("%d",&x);
   insertion(root,x);
    printf("\nTree After insertion:-\n");
   inorder_traversal(root);

   return 0;
}
