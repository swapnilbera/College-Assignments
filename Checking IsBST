#include <stdio.h>
#include <stdlib.h>

struct node{
int data;
struct node *left;
struct node *right;
};
struct node* create_node(int key){
struct node *n;
n=(struct node*) malloc(sizeof(struct node));\
n->data=key;
n->left=NULL;
n->right=NULL;

return n;
}
void inorder_traversal(struct node *root){
if(root!=NULL){
    inorder_traversal(root->left);
    printf("%d ",root->data);
    inorder_traversal(root->right);
}
}
int isBSTree(struct node *root){
    static struct node *prev=NULL;
if(root!=NULL){
    if(!isBSTree(root->left))
        return 0;
    if(prev!=NULL && root ->data <= prev->data)
        return 0;
    prev=root;
    return isBSTree(root->right);

}
else
    return 1;

}
/*    5
    /   \
    2    8
   / \   / \
   1  3  7  9
*/
int main()
{
   struct node *root=create_node(5);
   struct node *r=create_node(8);
   struct node *l=create_node(2);
   struct node *rr=create_node(9);
   struct node *rl=create_node(7);
   struct node *ll=create_node(1);
   struct node *lr=create_node(3);
   root->left=l;
   root->right=r;
   l->left=ll;
   l->right=lr;
   r->right=rr;
   r->left=rl;
   if(isBSTree(root))
    printf("It's a BST");
   else
    printf("It's not A BST");




    return 0;
}
