#include <stdio.h>
#include <stdlib.h>

struct node{
int data;
struct node *left;
struct node *right;
};
struct node* create_node(int key){
struct node *n;
n=(struct node*) malloc(sizeof(struct node));\
n->data=key;
n->left=NULL;
n->right=NULL;

return n;
}
struct node* inorder_pre(struct node* root){
    root=root->left;
while(root->right!=NULL){
    root=root->right;
}
return root;
}

void inorder_traversal(struct node *root){
if(root!=NULL){
    inorder_traversal(root->left);
    printf("%d ",root->data);
    inorder_traversal(root->right);
}
}
struct node* deletion(struct node* root,int x){
    struct node* ipre;
    if(root==NULL){
        printf("THERE IS NOTHING FOR DELETION.....");
       return NULL ;
    }
    if(root->left==NULL && root->right==NULL){
        free(root);
        return NULL;
    }
if(root->data <x){
    root->right=deletion(root->right,x);

}
if(root->data >x){
    root->left= deletion(root->left,x);

}
else{
    ipre=inorder_pre(root);
    root->data=ipre->data;
    root->left=deletion(root->left,ipre->data);


}
return root;
}


/*    5
    /   \
    2    8
   / \   / \
   1  3  7  9
*/
int main()
{
   struct node *root=create_node(5);
   struct node *r=create_node(8);
   struct node *l=create_node(2);
   struct node *rr=create_node(9);
   struct node *rl=create_node(7);
   struct node *ll=create_node(1);
   struct node *lr=create_node(3);
   root->left=l;
   root->right=r;
   l->left=ll;
   l->right=lr;
   r->right=rr;
   r->left=rl;
   printf("Tree before deletion:-\n");
   inorder_traversal(root);
   int x;
   printf("\nYou want to delete which no.?");
   scanf("%d",&x);
   deletion(root,x);
    printf("\nTree After deletion:-\n");
   inorder_traversal(root);

   return 0;
}
